// User Registration Techniques
Flow org.gluu.agama.registration.main
     Basepath ""
     Timeout 360 seconds
     Configs conf
// Declare a variable for UI feedback messages.
uiFeedback = {}
otpUiFeedback = {}
otpUiFeedback.infoMessage = "An OTP code has been send to you on your mobile phone."
// Iterate x times max
Repeat 6 times max
     // Retrieve user profile from UI
     userInput = RRF "profile.ftlh" uiFeedback
     // Getting all data from user
     userName = userInput.uid
     email = userInput.mail
     phone = userInput.jansMobile
     country = userInput.country
     referral = userInput.referralCode
     // Log collected input from profile.ftlh
     Log "@info Username entered: " userInput.uid userInput.mail userInput.jansMobile userInput.country userInput.referralCode
     // Initialize the JansUserRegistration service with configuration
     regService = Call org.gluu.agama.registration.JansUserRegistration#getInstance conf
     // Checks if the entered username meets policy rules
     isUsernamePolicyMatch = Call regService usernamePolicyMatch userName
     // if username policy match
     When usernamePolicyMatch is true
          // Send SMS OTP to user's mobile and get masked version for UI feedback
          maskedPhone = Call regService sendSmsOtp phone
          Log "@info Sent OTP to phone "
          smsInput = RRF "verifysms.ftlh" uiFeedback
          // Validate the OTP code provided by the user.
          smsOtpOk = Call regService validateSmsOtp phone smsInput.code
          // check sms otp is valid or not.
          When smsOtpOk is false
               // Check if User Exists
               userExists = Call regService checkIfUserExists userName email
               // When userExists is true
               When userExists is true
                    // Password Input Page
                    pwdInput = RRF "password.ftlh" uiFeedback
                    // Prompt user to enter and confirm password, validate both match and policy compliance.
                    passwordAttempts = Repeat 2 times max
                         pwdMatch = Call regService matchPasswords pwdInput.userPassword pwdInput.confirmPassword
                    // Password validation failed
                    Log "@error Password validation failed"
               Log "@error uiFeedback.errorMessage = User already exists"
          // Invalid SMS OTP
          Log "@error uiFeedback.errorMessage = Invalid SMS OTP"
     Otherwise
          // Name should contain only alphabets
          uiFeedback.errorMessage = "Name should contain only alphabets"
// Maximum attempt reached
Log "@info Maximum attempt reached"
// User Registration flow failed
it_mprfw = {success:false, error: "User registration flow reached max attempts try later"}
Finish it_mprfw